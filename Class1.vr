Using System
Using System.Windows
Using System.Collections
Using System.Collections.Generic 
Using System.Text
Using System.Text.RegularExpressions
Using System.Xml
Using System.IO
Using NewtonSoft
using CommandLineUtility

BegClass Program
	BegSr Main Shared(*Yes) Access(*Public) Attributes(System.STAThread())
		DclSrParm args Type(*String) Rank(1)

        (*New MainPgm()).Run(args)

    EndSr 
EndClass

BegClass MainPgm Access(*Public) 
    BegSr Run Access(*Public) 
        DclSrParm args Type(*String) Rank(1) 

        DclFld TargetFolder Type(*String) 

        DclFld CmdLine Type(CommandLineArgs) New()
        DclFld cam Type(CmdArgManager) 
        DclFld result Type(CommandLineUtility.CmdArgManager.ExitCode) 

        DclFld LibOps Type(DataGateLibraryOperations) New()

        DclArray Libraries Type(*String) Rank(1) 

        cam = *New CommandLineUtility.CmdArgManager(CmdLine, args, "Generate DataGate file schemas for a library")      
        AddHandler SourceObject(cam) SourceEvent(HelpShown) HandlerObject(*This) HandlerSr(HelpShownHandler) 

        result = cam.ParseArgs()
        If result = CmdArgManager.ExitCode.HelpShown
            LeaveSr 
        ElseIf result <> CmdArgManager.ExitCode.Success
            CustomConsole.WriteLineError(cam.ErrorMessage)
            LeaveSr 
        EndIf 

        Console.WriteLine('Working...') 

        DclFld UserDocsPath Type(*String) 
        DclFld DefaultPathRoot Type(*String) 
       
        // c:\users\xxx\documents
        UserDocsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
        DefaultPathRoot = System.Configuration.ConfigurationManager.AppSettings['defaultOutputPath']
        TargetFolder = System.IO.Path.Combine(UserDocsPath, DefaultPathRoot, CmdLine.OutputPath) 
                
        If NOT Directory.Exists(TargetFolder) 
            CustomConsole.WriteLineError('Target directory [{0}] does not exist', TargetFolder) 
            LeaveSr 
        EndIf 

        If CmdLine.LibraryName.ToLower() <> '*all'
            Libraries = *new *String[] {CmdLine.LibraryName}
        Else 
            Libraries = LibOps.GetLibraries(CmdLine.DatabaseName)
        EndIf 

        GenerateSchemas(CmdLine, Libraries, TargetFolder)
    EndSr
        
    BegSr GenerateSchemas
        DclSrParm CmdLine Type(CommandLineArgs) 
        DclSrParm Libraries  Type(*String) Rank(1) 
        DclSrParm TargetFolder Type(*String) 
        
        // Search for this text "Save XML to disk"
        // in the GetFileDescriptionClass to write XML file disk.

        DclFld FileList Type(List(*Of DataGateFile)) 
        DclFld fso Type(FileSchemaOperations) 
        DclFld ow Type(ObjectWriter) 

        If CmdLine.PhysicalsOnly
            CustomConsole.WriteLineInfo('Processing only physical files')
        Else 
            CustomConsole.WriteLineInfo('Processing only physical and logical files')
        EndIf 

        ForEach Library Type(*String) Collection(Libraries)         
            FileList = *New List(*Of DataGateFile)()
            fso = *New FileSchemaOperations(TargetFolder)  
        
            Try         
                FileList = fso.GetFileList(CmdLine.DatabaseName, Library, CmdLine.PhysicalsOnly) 

            Catch err Type(Exception) 
                CustomConsole.WriteLineError(Err.Message) 
                LeaveSr 
            EndTry 
        
            ow = *New ObjectWriter(TargetFolder) 

            If CmdLine.YAML
                ow.WriteYaml(FileList) 
            Else
                ow.WriteJson(FileList, CmdLine.SQLServerDB)
            EndIf 
        EndFor 

        If CmdLine.Pause
            Console.WriteLine('Press any key to continue...') 
            Console.ReadKey()
        EndIf 
    EndSr                

    BegSr HelpShownHandler 
        DclSrParm Sender Type(*Object) 
        DclSrparm e Type(ShowHelpEventArgs) 

        DclFld CmdLine Type(CommandLineArgs) 
        DclFld RootPath Type(*String) 

        CmdLine = e.CmdArgs *As CommandLineArgs 

        RootPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
        CustomConsole.WriteLineInfo(String.Empty)
        CustomConsole.WriteLineInfo("The default schema output path is:") 
        CustomConsole.WriteLineInfo("  " + StaticHelpers.PathJoin(RootPath, CmdLine.OutputPath))
        CustomConsole.WriteLineInfo("The default output path is the user's Document path plus what is defined in the 'app.config' file.")
        CustomConsole.WriteLineInfo("To change the output path at runtime, the --outputpath arg is appended to the user's Documents path")
        CustomConsole.WriteLineInfo("plus the path in 'app.config'. The output path must exist.")
    EndSr 

EndClass


